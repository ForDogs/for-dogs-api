name: Deploy to AWS EC2 using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:${{ github.sha }}
  DOCKER_CONTAINER_NAME: for-dogs-container
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_SSH_USER: ubuntu
  EC2_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up application-prod.yml
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application-prod.yml

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew -x test build

      - name: Build Docker image
        run: docker build . --file Dockerfile.prod --tag ${{ env.DOCKER_IMAGE_NAME }}

      - name: Login docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.EC2_PRIVATE_KEY }}
          script: |
            set -e
            DOCKER_CONTAINER_NAME="${{ env.DOCKER_CONTAINER_NAME }}"
            DOCKER_IMAGE_NAME="${{ env.DOCKER_IMAGE_NAME }}"
          
            CONTAINER_ID=$(docker ps -q --filter "name=$DOCKER_CONTAINER_NAME")
            echo "Existing container ID: $CONTAINER_ID"

            if [ ! -z "$CONTAINER_ID" ]; then
              docker stop $CONTAINER_ID || true
              docker rm $CONTAINER_ID || true
            fi
          
            docker pull $DOCKER_IMAGE_NAME
        
            docker run -d -p 80:80 -p 443:443 \
            --name $DOCKER_CONTAINER_NAME \
            -v /etc/letsencrypt/live/api.fordogs.store:/etc/letsencrypt/live/api.fordogs.store \
            --log-driver=json-file --log-opt max-size=10m --log-opt max-file=3 \
            $DOCKER_IMAGE_NAME
